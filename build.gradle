import java.nio.file.Paths

apply from: 'buildsystem/ci.gradle'
apply from: 'buildsystem/dependencies.gradle'

buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://maven.fabric.io/public' }
    jcenter()
  }

  final def androidPluginVersion = "2.2.0"
  final def dexcountPluginVersion = "0.5.6"
  final def pSyncPluginVersion = "1.1.5"
  final def fabricToolsPluginVersion = "1.21.7"

  final
  def classpathDependencies = [androidPlugin        : "com.android.tools.build:gradle:${androidPluginVersion}",
                               dexcountPlugin       : "com.getkeepsafe.dexcount:dexcount-gradle-plugin:${dexcountPluginVersion}",
                               pSync                : "gradle.plugin.com.flipboard:psync:${pSyncPluginVersion}",
                               fabricToolsPlugin    : "io.fabric.tools:gradle:${fabricToolsPluginVersion}"]

  dependencies {
    classpath classpathDependencies.androidPlugin
    classpath classpathDependencies.dexcountPlugin
    classpath classpathDependencies.pSync
    classpath classpathDependencies.fabricToolsPlugin
  }
}

//If this is modified, remember to update the script(s) accordingly
final def staticAnalysisReportFolderTarget = project.rootDir.absolutePath + "/staticAnalysisReport"

// Query git for the tag and commit count. Use these to automate versioning. (https://github
// .com/nickbutcher/plaid/blob/master/app/build.gradle)
final def gitTag = 'git describe --tags'.execute([], project.rootDir).text.trim()
final def gitCommitCount = 100 + Integer.parseInt('git rev-list --count HEAD'.execute([], project
    .rootDir).text.trim())

allprojects {
  ext {
    //Application details
    androidVersionCode = gitCommitCount
    androidVersionName = gitTag
    androidTestInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"

    androidApplicationIdBase = "com.jorge.boats.xkcd%s"
    javaVersion = JavaVersion.VERSION_1_8

    staticAnalysisReportTarget = staticAnalysisReportFolderTarget
  }
}

task clean(type: Delete, overwrite: true) {
  group "Verification"
  description "Deletes the build directories of the whole project and the static analysis result."

  for (final Project each : rootProject.allprojects) {
    delete each.buildDir
    delete Paths.get(each.projectDir.absolutePath, staticAnalysisReportFolderTarget).
        toAbsolutePath().
        toString()
  }
}
