apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {

  //noinspection GroovyAssignabilityCheck
  compileSdkVersion androidCompileSdkVersion
  //noinspection GroovyAssignabilityCheck
  buildToolsVersion androidBuildToolsVersion

  defaultConfig {
    //noinspection GroovyAssignabilityCheck
    versionCode androidVersionCode
    //noinspection GroovyAssignabilityCheck
    versionName androidVersionName
    //noinspection GroovyAssignabilityCheck
    minSdkVersion androidMinSdkVersion
    //noinspection GroovyAssignabilityCheck
    targetSdkVersion androidTargetSdkVersion

    //noinspection GroovyAssignabilityCheck
    testInstrumentationRunner androidTestInstrumentationRunner

    manifestPlaceholders = [fabricApiKey: fabricApiKey]

    multiDexEnabled true
  }

  compileOptions {
    //noinspection GroovyAssignabilityCheck
    sourceCompatibility javaVersion
    targetCompatibility javaVersion
    incremental false
  }

  signingConfigs {
    googlePlay {
      storeFile new File("boats.keystore")
      storePassword(new File("keystore.pwd").text.trim())
      keyAlias("boats")
      keyPassword(new File("key.pwd").text.trim())
    }
  }

  buildTypes {
    debug {
      minifyEnabled false
      shrinkResources false
    }

    release {
      minifyEnabled false
      shrinkResources false
      zipAlignEnabled true
      signingConfig signingConfigs.googlePlay
    }
  }

  flavorDimensions "stage", "base"

  def enableJack = rootProject.ext.javaVersion == JavaVersion.VERSION_1_8

  productFlavors {
    dev {
      minSdkVersion 21
      dimension "stage"
      jackOptions {
        enabled enableJack
      }
    }
    prod {
      dimension "stage"
      jackOptions {
        enabled enableJack
      }
    }
    core {
      applicationId String.format(Locale.ENGLISH, androidApplicationIdBase, "")
      dimension "base"
      jackOptions {
        enabled enableJack
      }
    }
  }

  applicationVariants.all { final variant ->
    variant.outputs.each { final output ->
      output.outputFile = new File(output.outputFile.parentFile, String.format(Locale.ENGLISH, "%s-%s-%d.apk", variant.productFlavors[0].name,
          variant.buildType.name, variant.versionCode));
    }
  }

  lintOptions {
    abortOnError !rootProject.ext.executingOnCI
    absolutePaths true
    checkAllWarnings true
    htmlOutput = new File("${staticAnalysisReportTarget}/presentation/lint.html")
    quiet false
    warningsAsErrors true
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  dexOptions {
    preDexLibraries true
    javaMaxHeapSize "8g"
  }
}

apply plugin: "com.getkeepsafe.dexcount"

dexcount {
  includeClasses = true
  includeFieldCount = false
  format = "json"
  orderByMethodCount = true
  verbose = false
}

apply plugin: 'com.github.ben-manes.versions'

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            final boolean rejected = ['assertj', 'butterknife', 'jsr250-api', 'dbflow'].any {
                final artifactName -> selection.candidate.displayName.contains(artifactName)
            }

            if (rejected) {
                selection.reject('Frozen artifact')
            }
        }
    }
}

task dependencyReport(type: Exec) {
    group "Maintenance"
    description "Shows a report of versions for dependencies."
    workingDir rootDir
    commandLine './gradlew dependencyUpdates -Drevision=release'.split(' ')
}

dependencies {
  compile project(':domain')
  compile project(':data')
  compile project(':photoview')

  final Collection<String> providedDependencies = providedPresentationDependencies.values()
  final Collection<String> debugCompileDependencies = debugCompilePresentationDependencies.values()

  final Collection<String> compileDependencies = compilePresentationDependencies.values()
  final Collection<String> aptDependencies = aptPresentationDependencies.values()
  final Collection<String> testCompileDependencies = testCompilePresentationDependencies.values()
  for (final String dependency : providedDependencies) provided dependency
  for (final String dependency : compileDependencies) compile dependency
  for (final String dependency : aptDependencies) annotationProcessor dependency
  for (final String dependency : debugCompileDependencies) debugCompile dependency
  for (final String dependency : testCompileDependencies) testCompile dependency
}
