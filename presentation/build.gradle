apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

apply from: "proguard/proguard.gradle"

android {

  //noinspection GroovyAssignabilityCheck
  compileSdkVersion androidCompileSdkVersion
  //noinspection GroovyAssignabilityCheck
  buildToolsVersion androidBuildToolsVersion

  productFlavors {
    standard {
      //noinspection GroovyAssignabilityCheck
      applicationId androidApplicationId
      //noinspection GroovyAssignabilityCheck
      versionCode androidVersionCode
      //noinspection GroovyAssignabilityCheck
      versionName androidVersionName
      archivesBaseName = "$applicationId-$versionCode"
      //noinspection GroovyAssignabilityCheck
      minSdkVersion androidMinSdkVersion
      //noinspection GroovyAssignabilityCheck
      targetSdkVersion androidTargetSdkVersion

      //noinspection GroovyAssignabilityCheck
      testInstrumentationRunner androidTestInstrumentationRunner
    }
  }

  compileOptions {
    //noinspection GroovyAssignabilityCheck
    sourceCompatibility javaVersion
    targetCompatibility javaVersion
  }

  //  signingConfigs {
  //    release {
  //      storeFile new File("boats.keystore")
  //      storePassword(new File("keystore.pwd").text.trim())
  //      keyAlias("boats")
  //      keyPassword(new File("key.pwd").text.trim())
  //    }
  //  }

  buildTypes {
    debug {
      minifyEnabled false
      shrinkResources false
    }
    release {
      //TODO Enable these three flags when ProGuard is setup and the product is ready to release
      minifyEnabled false
      shrinkResources false
      zipAlignEnabled false
      proguardFiles =
          ["proguard/proguard-android-extensions.pro", "proguard/proguard-glide-okhttp-module.pro"]
      proguardFiles += getDefaultProguardFile("proguard-android-optimize.txt")
      //    noinspection GroovyAssignabilityCheck
      final File f = java.nio.file.Paths.get(rootProject.rootDir.getAbsolutePath(), "presentation",
          "proguard", "proguardDownloadContainer").
          toFile()
      f?.listFiles()?.each { file ->
        System.out.format(Locale.ENGLISH, "Adding %s\n", file.getName())
        proguardFiles += file
      }
      //      signingConfig signingConfigs.release
    }
  }

  lintOptions {
    abortOnError !rootProject.ext.executingOnCI
    absolutePaths true
    checkAllWarnings true
    htmlOutput = new File("${staticAnalysisReportTarget}/presentation/lint.html")
    quiet false
    warningsAsErrors true
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
}

apply plugin: "com.getkeepsafe.dexcount"

dexcount {
  includeClasses = true
  includeFieldCount = false
  printAsTree = false
  orderByMethodCount = true
  verbose = false
}

dependencies {
  compile project(':domain')
  compile project(':data')
  compile project(':photoview')

  final Collection<String> providedDependencies = providedPresentationDependencies.values()
  final Collection<String> debugCompileDependencies = debugCompilePresentationDependencies.
      values()

  final Collection<String> compileDependencies = compilePresentationDependencies.values()
  final Collection<String> aptDependencies = aptPresentationDependencies.values()
  final Collection<String> androidTestCompileDependencies = androidTestCompilePresentationDependencies.
      values()
  final Collection<String> testCompileDependencies = testCompilePresentationDependencies.
      values()
  for (final String dependency : providedDependencies) provided dependency
  for (final String dependency : compileDependencies) compile dependency
  for (final String dependency : aptDependencies) apt dependency
  for (final String dependency : androidTestCompileDependencies) {
    if (dependency.contains("support.test")) {
      androidTestCompile(dependency) {
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
      }
    } else {
      androidTestCompile dependency
    }
  }
  for (final String dependency : debugCompileDependencies) debugCompile dependency
  for (final String dependency : testCompileDependencies) testCompile dependency
}
